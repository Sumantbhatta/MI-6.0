/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.machinarymgmt.service.api;

import com.machinarymgmt.service.dto.MachinaryMgmtBaseApiResponse;
import com.machinarymgmt.service.dto.StockStatementListResponse;
import com.machinarymgmt.service.dto.StockStatementRequestDto;
import com.machinarymgmt.service.dto.StockStatementResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-06T14:34:14.883037100+05:30[Asia/Calcutta]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "StockStatement", description = "Endpoints for managing and tracking stock statements and inventory details.")
public interface StockStatementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /stockstatement : Create new Stock Statement record
     *
     * @param stockStatementRequestDto  (optional)
     * @return Stock statement created successfully (status code 200)
     */
    @Operation(
        operationId = "createStockStatement",
        summary = "Create new Stock Statement record",
        tags = { "StockStatement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Stock statement created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/stockstatement",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> createStockStatement(
        @Parameter(name = "StockStatementRequestDto", description = "") @Valid @RequestBody(required = false) StockStatementRequestDto stockStatementRequestDto
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /stockstatement/{id} : Delete Stock statement by ID
     *
     * @param id  (required)
     * @return Stock Statement deleted successfully (status code 200)
     */
    @Operation(
        operationId = "deleteStockStatement",
        summary = "Delete Stock statement by ID",
        tags = { "StockStatement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Stock Statement deleted successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/stockstatement/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> deleteStockStatement(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /stockstatement : Get all Stock Statements
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getStockStatement",
        summary = "Get all Stock Statements",
        tags = { "StockStatement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StockStatementListResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stockstatement",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StockStatementListResponse> getStockStatement(
        
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"landedRate\" : 2.3021358869347655, \"item\" : { \"code\" : \"code\", \"id\" : 1 }, \"month\" : 6, \"balance\" : 5.962133916683182, \"year\" : 1, \"lastIssueOn\" : \"2000-01-23\", \"landedValue\" : 5.637376656633329, \"project\" : { \"name\" : \"name\", \"id\" : 5 }, \"equipment\" : { \"name\" : \"name\", \"id\" : 7 }, \"id\" : 0, \"lastReceiptOn\" : \"2000-01-23\" }, { \"landedRate\" : 2.3021358869347655, \"item\" : { \"code\" : \"code\", \"id\" : 1 }, \"month\" : 6, \"balance\" : 5.962133916683182, \"year\" : 1, \"lastIssueOn\" : \"2000-01-23\", \"landedValue\" : 5.637376656633329, \"project\" : { \"name\" : \"name\", \"id\" : 5 }, \"equipment\" : { \"name\" : \"name\", \"id\" : 7 }, \"id\" : 0, \"lastReceiptOn\" : \"2000-01-23\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /stockstatement/{id} : Get Stock Statement by ID
     *
     * @param id  (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getStockStatementByID",
        summary = "Get Stock Statement by ID",
        tags = { "StockStatement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StockStatementResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stockstatement/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StockStatementResponse> getStockStatementByID(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"landedRate\" : 2.3021358869347655, \"item\" : { \"code\" : \"code\", \"id\" : 1 }, \"month\" : 6, \"balance\" : 5.962133916683182, \"year\" : 1, \"lastIssueOn\" : \"2000-01-23\", \"landedValue\" : 5.637376656633329, \"project\" : { \"name\" : \"name\", \"id\" : 5 }, \"equipment\" : { \"name\" : \"name\", \"id\" : 7 }, \"id\" : 0, \"lastReceiptOn\" : \"2000-01-23\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /stockstatement/{id} : Update Stock Statement
     *
     * @param id  (required)
     * @param stockStatementRequestDto  (optional)
     * @return Stock Statement updated successfully (status code 200)
     */
    @Operation(
        operationId = "updateStockStatement",
        summary = "Update Stock Statement",
        tags = { "StockStatement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Stock Statement updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/stockstatement/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> updateStockStatement(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "StockStatementRequestDto", description = "") @Valid @RequestBody(required = false) StockStatementRequestDto stockStatementRequestDto
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
