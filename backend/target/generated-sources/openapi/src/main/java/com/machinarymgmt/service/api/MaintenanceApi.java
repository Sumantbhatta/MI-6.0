/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.machinarymgmt.service.api;

import com.machinarymgmt.service.dto.MachinaryMgmtBaseApiResponse;
import com.machinarymgmt.service.dto.MaintenanceLogListResponse;
import com.machinarymgmt.service.dto.MaintenanceLogRequestDto;
import com.machinarymgmt.service.dto.MaintenanceLogResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-26T16:53:22.870701700+05:30[Asia/Calcutta]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Maintenance", description = "Endpoints for tracking maintenance, servicing, and repairs.")
public interface MaintenanceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /maintenance : Create new maintenance log
     *
     * @param maintenanceLogRequestDto  (optional)
     * @return Maintenance log created successfully (status code 200)
     */
    @Operation(
        operationId = "createMaintenanceLog",
        summary = "Create new maintenance log",
        tags = { "Maintenance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Maintenance log created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/maintenance",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> createMaintenanceLog(
        @Parameter(name = "MaintenanceLogRequestDto", description = "") @Valid @RequestBody(required = false) MaintenanceLogRequestDto maintenanceLogRequestDto
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /maintenance/{id} : Delete maintenance log
     *
     * @param id  (required)
     * @return Maintenance log deleted successfully (status code 200)
     */
    @Operation(
        operationId = "deleteMaintenanceLog",
        summary = "Delete maintenance log",
        tags = { "Maintenance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Maintenance log deleted successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/maintenance/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> deleteMaintenanceLog(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /maintenance : Get all maintenance logs
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getAllMaintenanceLogs",
        summary = "Get all maintenance logs",
        tags = { "Maintenance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MaintenanceLogListResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/maintenance",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MaintenanceLogListResponse> getAllMaintenanceLogs(
        
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"date\" : \"2000-01-23\", \"serviceDate\" : \"2000-01-23\", \"startReading\" : 5, \"equipment\" : { \"name\" : \"name\", \"id\" : 7 }, \"balanceForService\" : 6, \"operatorSignature\" : \"operatorSignature\", \"closeReading\" : 1, \"operatorName\" : \"operatorName\", \"feedback\" : \"feedback\", \"maintenanceSignature\" : \"maintenanceSignature\", \"serviceHours\" : 5, \"purposeActivities\" : \"purposeActivities\", \"breakdownSynopsis\" : \"breakdownSynopsis\", \"typeOfMaintenance\" : \"typeOfMaintenance\", \"id\" : 0, \"remarks\" : \"remarks\" }, { \"date\" : \"2000-01-23\", \"serviceDate\" : \"2000-01-23\", \"startReading\" : 5, \"equipment\" : { \"name\" : \"name\", \"id\" : 7 }, \"balanceForService\" : 6, \"operatorSignature\" : \"operatorSignature\", \"closeReading\" : 1, \"operatorName\" : \"operatorName\", \"feedback\" : \"feedback\", \"maintenanceSignature\" : \"maintenanceSignature\", \"serviceHours\" : 5, \"purposeActivities\" : \"purposeActivities\", \"breakdownSynopsis\" : \"breakdownSynopsis\", \"typeOfMaintenance\" : \"typeOfMaintenance\", \"id\" : 0, \"remarks\" : \"remarks\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /maintenance/{id} : Get maintenance log by ID
     *
     * @param id  (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getMaintenanceLogById",
        summary = "Get maintenance log by ID",
        tags = { "Maintenance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MaintenanceLogResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/maintenance/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MaintenanceLogResponse> getMaintenanceLogById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"date\" : \"2000-01-23\", \"serviceDate\" : \"2000-01-23\", \"startReading\" : 5, \"equipment\" : { \"name\" : \"name\", \"id\" : 7 }, \"balanceForService\" : 6, \"operatorSignature\" : \"operatorSignature\", \"closeReading\" : 1, \"operatorName\" : \"operatorName\", \"feedback\" : \"feedback\", \"maintenanceSignature\" : \"maintenanceSignature\", \"serviceHours\" : 5, \"purposeActivities\" : \"purposeActivities\", \"breakdownSynopsis\" : \"breakdownSynopsis\", \"typeOfMaintenance\" : \"typeOfMaintenance\", \"id\" : 0, \"remarks\" : \"remarks\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /maintenance/{id} : Update maintenance log
     *
     * @param id  (required)
     * @param maintenanceLogRequestDto  (optional)
     * @return Maintenance log updated successfully (status code 200)
     */
    @Operation(
        operationId = "updateMaintenanceLog",
        summary = "Update maintenance log",
        tags = { "Maintenance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Maintenance log updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/maintenance/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> updateMaintenanceLog(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "MaintenanceLogRequestDto", description = "") @Valid @RequestBody(required = false) MaintenanceLogRequestDto maintenanceLogRequestDto
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
