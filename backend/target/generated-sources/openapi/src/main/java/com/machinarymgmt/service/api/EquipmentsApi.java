/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.machinarymgmt.service.api;

import com.machinarymgmt.service.dto.EquipmentListResponse;
import com.machinarymgmt.service.dto.EquipmentRequestDto;
import com.machinarymgmt.service.dto.EquipmentResponse;
import com.machinarymgmt.service.dto.MachinaryMgmtBaseApiResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-13T15:41:51.742519800+05:30[Asia/Calcutta]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Equipments", description = "Endpoints for managing machinery and equipment inventory.")
public interface EquipmentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /equipment : Create new equipment
     *
     * @param equipmentRequestDto  (optional)
     * @return Equipment created successfully (status code 200)
     */
    @Operation(
        operationId = "createEquipment",
        summary = "Create new equipment",
        tags = { "Equipments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Equipment created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/equipment",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> createEquipment(
        @Parameter(name = "EquipmentRequestDto", description = "") @Valid @RequestBody(required = false) EquipmentRequestDto equipmentRequestDto
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /equipment/{id} : Delete equipment
     *
     * @param id  (required)
     * @return Equipment deleted successfully (status code 200)
     */
    @Operation(
        operationId = "deleteEquipment",
        summary = "Delete equipment",
        tags = { "Equipments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Equipment deleted successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/equipment/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> deleteEquipment(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /equipment : Get all equipment
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getAllEquipment",
        summary = "Get all equipment",
        tags = { "Equipments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EquipmentListResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/equipment",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EquipmentListResponse> getAllEquipment(
        
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"assetCode\" : \"assetCode\", \"yearOfManufacture\" : 6, \"name\" : \"name\", \"vehicleNumber\" : \"vehicleNumber\", \"project\" : { \"name\" : \"name\", \"id\" : 5 }, \"model\" : { \"name\" : \"name\", \"id\" : 5 }, \"id\" : 0, \"category\" : { \"name\" : \"name\", \"id\" : 1 } }, { \"assetCode\" : \"assetCode\", \"yearOfManufacture\" : 6, \"name\" : \"name\", \"vehicleNumber\" : \"vehicleNumber\", \"project\" : { \"name\" : \"name\", \"id\" : 5 }, \"model\" : { \"name\" : \"name\", \"id\" : 5 }, \"id\" : 0, \"category\" : { \"name\" : \"name\", \"id\" : 1 } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /equipment/{id} : Get equipment by ID
     *
     * @param id  (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getEquipmentById",
        summary = "Get equipment by ID",
        tags = { "Equipments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EquipmentResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/equipment/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EquipmentResponse> getEquipmentById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"assetCode\" : \"assetCode\", \"yearOfManufacture\" : 6, \"name\" : \"name\", \"vehicleNumber\" : \"vehicleNumber\", \"project\" : { \"name\" : \"name\", \"id\" : 5 }, \"model\" : { \"name\" : \"name\", \"id\" : 5 }, \"id\" : 0, \"category\" : { \"name\" : \"name\", \"id\" : 1 } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /equipment/{id} : Update equipment
     *
     * @param id  (required)
     * @param equipmentRequestDto  (optional)
     * @return Equipment updated successfully (status code 200)
     */
    @Operation(
        operationId = "updateEquipment",
        summary = "Update equipment",
        tags = { "Equipments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Equipment updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/equipment/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> updateEquipment(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "EquipmentRequestDto", description = "") @Valid @RequestBody(required = false) EquipmentRequestDto equipmentRequestDto
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
