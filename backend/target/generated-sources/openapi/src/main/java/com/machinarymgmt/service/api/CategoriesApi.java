/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.machinarymgmt.service.api;

import com.machinarymgmt.service.dto.EquipmentCategoryListResponse;
import com.machinarymgmt.service.dto.EquipmentCategoryRequestDto;
import com.machinarymgmt.service.dto.EquipmentCategoryResponse;
import com.machinarymgmt.service.dto.MachinaryMgmtBaseApiResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-06T14:34:14.883037100+05:30[Asia/Calcutta]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Categories", description = "Endpoints for categorizing equipment based on type and function.")
public interface CategoriesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /categories : Create new equipment category
     *
     * @param equipmentCategoryRequestDto  (optional)
     * @return Category created successfully (status code 200)
     */
    @Operation(
        operationId = "createCategory",
        summary = "Create new equipment category",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EquipmentCategoryResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/categories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EquipmentCategoryResponse> createCategory(
        @Parameter(name = "EquipmentCategoryRequestDto", description = "") @Valid @RequestBody(required = false) EquipmentCategoryRequestDto equipmentCategoryRequestDto
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"name\" : \"name\", \"id\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /categories/{id} : Delete equipment category
     *
     * @param id  (required)
     * @return Category deleted successfully (status code 200)
     */
    @Operation(
        operationId = "deleteCategory",
        summary = "Delete equipment category",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category deleted successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/categories/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> deleteCategory(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /categories : Get all equipment categories
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getAllCategories",
        summary = "Get all equipment categories",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EquipmentCategoryListResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/categories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EquipmentCategoryListResponse> getAllCategories(
        
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"name\" : \"name\", \"id\" : 0 }, { \"name\" : \"name\", \"id\" : 0 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /categories/{id} : Get equipment category by ID
     *
     * @param id  (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getCategoryById",
        summary = "Get equipment category by ID",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EquipmentCategoryResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/categories/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EquipmentCategoryResponse> getCategoryById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"name\" : \"name\", \"id\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /categories/{id} : Update equipment category
     *
     * @param id  (required)
     * @param equipmentCategoryRequestDto  (optional)
     * @return Category updated successfully (status code 200)
     */
    @Operation(
        operationId = "updateCategory",
        summary = "Update equipment category",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MachinaryMgmtBaseApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/categories/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MachinaryMgmtBaseApiResponse> updateCategory(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "EquipmentCategoryRequestDto", description = "") @Valid @RequestBody(required = false) EquipmentCategoryRequestDto equipmentCategoryRequestDto
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
